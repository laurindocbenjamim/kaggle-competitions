install.packages("tidyverse")
install.packages("ragg")
install.packages("ragg")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(textshaping)
library(ragg)
library(tidyverse)
library(caret)
library(systemfonts)
library(textshaping)
library(ragg)
library(tidyverse)
library(caret)
library(readr)
library(Metrics)
install.packages("randomForest")
install.packages("xgboost")
install.packages("glmnet")
install.packages("Metrics")
library(systemfonts)
library(textshaping)
library(ragg)
library(tidyverse)
library(caret)
library(tidyverse)
library(caret)
library(readr)
library(Metrics)
library(readr)
library(Metrics)
library(glmnet)
library(Metrics)
library(glmnet)
library(randomForest)
library(randomForest)
library(systemfonts)
library(textshaping)
library(ragg)
library(tidyverse)
library(caret)
library(readr)
library(Metrics)
library(glmnet)
library(randomForest)
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- read_csv("sample_submission.csv")
train_data <- read_csv("train.csv")
test_data <- read_csv("test_set.csv")
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- read_csv("sample_submission.csv")
train_data <- read_csv("train.csv")
library(data.table)
library(data.table)
sample_submission <- fread("sample_submission.csv")
train_data <- fread("train.csv")
test_data <- fread("test_set.csv")
test_data <- fread("test.csv")
str(train_data)
str(test_data)
str(sample_submission)
str(sample_submission)
str(test_data)
str(train_data)
str(sample_submission)
str(test_data)
str(train_data)
install.packages("data.table")
install.packages("mice")
install.packages("corrplot")
library(data.table)
library(data.table)
library(ggplot2)
library(systemfonts)
library(textshaping)
library(mice)
library(data.table)
library(ggplot2)
library(systemfonts)
library(textshaping)
library(mice)
library(mice)
install.packages("mice")
library(mice)
library(textshaping)
library(mice)
install.packages("nloptr")
library(data.table)
library(ggplot2)
library(systemfonts)
library(textshaping)
library(mice)
#library(mice)
library(ragg)
library(tidyverse)
library(caret)
library(tidyverse)
library(caret)
library(readr)
library(Metrics)
library(readr)
library(Metrics)
library(glmnet)
library(Metrics)
library(glmnet)
library(randomForest)
library(glmnet)
library(randomForest)
library(data.table)
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- read_csv("sample_submission.csv")
train_data <- read_csv("train.csv")
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- read_csv("sample_submission.csv")
train_data <- read_csv("train.csv")
test_data <- read_csv("test_set.csv")
View(sample_submission)
View(test_data)
View(train_data)
train_data <- read_csv("train.csv")
test_data <- read_csv("test_set.csv")
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- fread("sample_submission.csv")
train_data <- fread("train.csv")
test_data <- fread("test.csv")
str(sample_submission)
str(test_data)
str(train_data)
summary(sample_submission)
summary(train_data)
summary(test_data)
View(sample_submission)
View(test_data)
View(sample_submission)
View(sample_submission)
# Visualizar
ggplot(sample_submission, aes(x = SalePrice) + geom_histogram(bins = 50) + theme_minimal())
# Visualizar
ggplot(sample_submission, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
cat("Sales: ", print(train_data$SalePrice))
# Visualizar
ggplot(train_data, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
cat("Sales: ", print(train_data$SalePrice))
summary(train_data)
str(train_data)
# converting the the dataset to Dataframe
train_df <- as.data.frame(train_data)
train_df < as.data.frame(test_data)
train_data <- fread("train.csv")
test_data <- fread("test.csv")
# converting the the dataset to Dataframe
train_df <- as.data.frame(train_data)
test_df < as.data.frame(test_data)
sample_submission <- fread("sample_submission.csv")
train_data <- fread("train.csv")
test_data <- fread("test.csv")
# converting the the dataset to Dataframe
train_df <- as.data.frame(train_data)
test_df < as.data.frame(test_data)
test_df <- as.data.frame(test_data)
# Check and Describe the data structure
str(sample_submission)
str(train_df)
str(train_df)
str(test_df)
summary(train_df)
# Selecting all columns except the Id which is not necessary
train_df <- train_df[, !names(train_df) %in% "Id"]]
# Selecting all columns except the Id which is not necessary
train_df <- train_df[, !names(train_df) %in% "Id"]
test_df <- test_df[, !names(test_df) %in% "Id"]
# Visualizar
ggplot(train_df, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
# Or if the Id is the first column
#train_df <- train_df[, -1]
#test_df <- test_df[, -1]
str(train_df)
summary(train_df)
# Visualizar
ggplot(train_df, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
# Get the data types for each columns
data_types <- sapply(train_df, class)
# Create a data frame for better readability
data_types_df <- data.frame(Column = names(train_df), DataType = data_types)
print(data_types_df)
# Identifying the numerical attributes/columns
num_cols <- names(train_df)[sapply(train_df, is.numeric)]
# Select numerical columns
train_num_cols <- train_df[, ..num_cols]
# Select numerical columns
train_num_cols <- train_df[, num_cols]
View(train_num_cols)
# to save plots in pdf or PNG
install.packages("patchwork")
library(patchwork)
# Combine plots
wrap_plots(plot_list, ncol = 4)
# Create a list to store plots
plot_list <- list()
# Create a list to store plots
plot_list <- list()
# Loop through numerical columns
for (col in num_cols){
p <- ggplot(train_num_cols, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = paste("Distribution of ", col), x = col, y = "Count")
plot_list[[col]] <- p
}
p <- ggplot(train_num_cols, aes(x = .data[[col]])) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = paste("Distribution of ", col), x = col, y = "Count")
plot_list[[col]] <- p
# Create a list to store plots
plot_list <- list()
# Loop through numerical columns
for (col in num_cols){
p <- ggplot(train_num_cols, aes(x = .data[[col]])) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = paste("Distribution of ", col), x = col, y = "Count")
plot_list[[col]] <- p
}
# Combine plots
wrap_plots(plot_list, ncol = 4)
# Arrange plots in a grid (4 columns)
grid.arrange(grobs = plot_list, ncol = 4)
install.packages("gridExtra")
library(gridExtra)
library(patchwork)
library(gridExtra)
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- fread("sample_submission.csv")
train_data <- fread("train.csv")
test_data <- fread("test.csv")
# converting the the dataset to Dataframe
train_df <- as.data.frame(train_data)
test_df <- as.data.frame(test_data)
# Check and Describe the data structure
str(sample_submission)
str(train_df)
str(test_df)
summary(sample_submission)
summary(train_df)
summary(test_df)
# Selecting all columns except the Id which is not necessary
train_df <- train_df[, !names(train_df) %in% "Id"]
test_df <- test_df[, !names(test_df) %in% "Id"]
# Or if the Id is the first column
#train_df <- train_df[, -1]
#test_df <- test_df[, -1]
str(train_df)
summary(train_df)
# Visualizar
ggplot(train_df, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
# Get the data types for each columns
data_types <- sapply(train_df, class)
# Create a data frame for better readability
data_types_df <- data.frame(Column = names(train_df), DataType = data_types)
print(data_types_df)
# Identifying the numerical attributes/columns
num_cols <- names(train_df)[sapply(train_df, is.numeric)]
# Select numerical columns
train_num_cols <- train_df[, num_cols]
# Create a list to store plots
plot_list <- list()
# Loop through numerical columns
for (col in num_cols){
p <- ggplot(train_num_cols, aes(x = .data[[col]])) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = paste("Distribution of ", col), x = col, y = "Count")
plot_list[[col]] <- p
}
# Arrange plots in a grid (4 columns)
grid.arrange(grobs = plot_list, ncol = 4)
# Arrange plots in a grid (4 columns)
n_plots <- length(plot_list)
grid.arrange(grobs = plot_list, ncol = 4)
View(train_num_cols)
print(train_num_cols)
# Arrange plots in a grid (4 columns)
n_plots <- length(plot_list)
grid.arrange(grobs = plot_list, ncol = ncol(train_num_cols))
columns <- length(names(train_num_cols))
print(columns)
grid.arrange(grobs = plot_list, ncol = 37)
# Combine plots
wrap_plots(plot_list, ncol = 37)
# checking for missing values
missing_values_count <- colSums(is.na(train_num_cols))
cat("Missing values: ", "\n")
print(missing_values_count[missing_values_count > 0])
print(missing_values_count[missing_values_count > 0])
# Input missing values for numerical columns
imp <- mice(train_num_cols, method = "pmm", m = 5, maxit = 5, seed = 123)
library(mice)
install.packages("mice")
#install.packages("nloptr")
install.packages("nloptr", configure.args = "--with-nlopt=/usr")
install.packages("mice")
library(mice)
library(textshaping)
library(mice)
library(ragg)
library(tidyverse)
library(caret)
library(readr)
library(Metrics)
library(glmnet)
library(randomForest)
library(data.table)
library(patchwork)
library(gridExtra)
# Loading the dataset
setwd("~/Documents/RProjects/kaggle competitions/house-prices/house-prices-advanced-regression-techniques")
sample_submission <- fread("sample_submission.csv")
train_data <- fread("train.csv")
test_data <- fread("test.csv")
# converting the the dataset to Dataframe
train_df <- as.data.frame(train_data)
test_df <- as.data.frame(test_data)
# Check and Describe the data structure
str(sample_submission)
str(train_df)
str(test_df)
summary(sample_submission)
summary(train_df)
summary(test_df)
# Selecting all columns except the Id which is not necessary
train_df <- train_df[, !names(train_df) %in% "Id"]
test_df <- test_df[, !names(test_df) %in% "Id"]
# Or if the Id is the first column
#train_df <- train_df[, -1]
#test_df <- test_df[, -1]
str(train_df)
summary(train_df)
# Visualizar
ggplot(train_df, aes(x = SalePrice)) + geom_histogram(bins = 50) + theme_minimal()
# Get the data types for each columns
data_types <- sapply(train_df, class)
# Create a data frame for better readability
data_types_df <- data.frame(Column = names(train_df), DataType = data_types)
print(data_types_df)
# Identifying the numerical attributes/columns
num_cols <- names(train_df)[sapply(train_df, is.numeric)]
# Select numerical columns
train_num_cols <- train_df[, num_cols]
# checking for missing values
missing_values_count <- colSums(is.na(train_num_cols))
cat("Missing values: ", "\n")
print(missing_values_count[missing_values_count > 0])
# Input missing values for numerical columns
imp <- mice(train_num_cols, method = "pmm", m = 5, maxit = 5, seed = 123)
train_numeric_complete <- complete(imp)
# View logged events
imp$loggedEvents
